---
- name: "Gathering VPC facts from {{ vpc_name }}"
  ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ vpc_name }}"
  register: vpc_facts
  
- name: Gathering private subnet facts
  ec2_vpc_subnet_info:
    filters:
      vpc-id: "{{ vpc_facts.vpcs[0].id }}"
      "tag:use": private
  register: subnet_facts

- name: Gather Hosted Zones
  route53_info:
    query: hosted_zone
  register: hz_facts

- name: Define hosted_zone_id
  set_fact:
    hosted_zone_id: "{{ item.Id.split('/')[2] }}"
  when: item.Name == cluster_name+'.'+base_domain+'.'
  loop: "{{ hz_facts.list }}"

- name: Check if {{ home_dir }}/.ssh Directory Exists
  stat:
    path: "{{ home_dir }}/.ssh"
  register: ssh_dir

- name: Create {{ home_dir }}/.ssh Directory
  file:
    path: "{{ home_dir }}/.ssh"
    state: directory
    mode: '0700'
  when: ssh_dir.stat.exists == False

- name: Generate Deployment Keys
  openssh_keypair:
    path: "{{ home_dir }}/.ssh/id_rsa_{{ cluster_name }}"
    comment: "core@ocp.kubeadmin"
  register: ssh_facts

- set_fact:
    ssh_key: "{{ lookup('file', '{{ ssh_facts.filename }}.pub') }}"

- name: Create "{{ cluster_name }}" Project 
  k8s:
    state: present
    name: "{{ cluster_name }}"
    api_version: project.openshift.io/v1
    kind: Project

- name: Check if cluster has already started Creating
  k8s_info:
    kind: ClusterDeployment
    api_version:  hive.openshift.io/v1
    name: "{{ cluster_name }}"
    namespace: "{{ cluster_name }}"
  register: clusterdeployment

- name: Display all variables/facts known for a host
  ansible.builtin.debug:
    var: clusterdeployment
    verbosity: 4

- name: Create "{{ cluster_name }}" cluster
  k8s:
    state: present
    definition: "{{ lookup('template', 'acm-cluster.yml.j2') }}"
  when: clusterdeployment.resources | length  == 0

- name: Wait for install to complete
  shell: |
    oc wait -n {{ cluster_name }} --for=condition=complete jobs --selector hive.openshift.io/cluster-deployment-name={{ cluster_name }},hive.openshift.io/job-type=provision --timeout=45m
  register: oc_get_pods
  retries: 5
  delay: 30
  until: oc_get_pods.rc == 0
  when: clusterdeployment.resources | length  == 0

- name: Set go kubconfig template
  set_fact: 
    go_kubeconfig_template: !unsafe "{{range .items}}{{.data.kubeconfig|base64decode}}{{end}}"

- name: Get kubeconfig for {{ cluster_name }} cluster
  shell: |
    oc get secret -l hive.openshift.io/cluster-deployment-name={{ cluster_name }},hive.openshift.io/secret-type=kubeconfig -n {{ cluster_name }} -o go-template --template="{{ go_kubeconfig_template }}"
  register: kubeconfig_secret
  retries: 5
  delay: 10
  until: kubeconfig_secret.rc == 0

- name: Set go password template
  set_fact: 
    go_kubeuser_template: !unsafe "{{range .items}}{{.data.password|base64decode}}{{end}}"

- name: Get kubeadmincreds pass for {{ cluster_name }} cluster
  shell: |
    oc get secret -l hive.openshift.io/cluster-deployment-name={{ cluster_name }},hive.openshift.io/secret-type=kubeadmincreds -n {{ cluster_name }} -o go-template --template="{{ go_kubeuser_template }}"
  register: kube_pass
  retries: 5
  delay: 10
  until: kube_pass.rc == 0

- name: Set go username template
  set_fact: 
    go_kubepass_template: !unsafe "{{range .items}}{{.data.username|base64decode}}{{end}}"

- name: Get kubeadmincreds user for {{ cluster_name }} cluster
  shell: |
    oc get secret -l hive.openshift.io/cluster-deployment-name={{ cluster_name }},hive.openshift.io/secret-type=kubeadmincreds -n {{ cluster_name }} -o go-template --template="{{ go_kubepass_template }}"
  register: kube_user
  retries: 5
  delay: 10
  until: kube_user.rc == 0

- name: Set Host for k8
  set_fact: 
    K8S_AUTH_HOST: "https://api.{{ cluster_name }}.{{ base_domain }}:6443"

- name: Get token
  shell: |
    oc login {{ K8S_AUTH_HOST }} -u {{ kube_user.stdout }} -p {{ kube_pass.stdout }} --insecure-skip-tls-verify=true
    oc whoami --show-token
  register: kube_token
  no_log: true

- name: Set Key for k8
  set_fact: 
    K8S_AUTH_API_KEY: "{{ kube_token.stdout_lines[kube_token.stdout_lines|length-1] }}"
  no_log: true

- name: Create .kube Directory
  file:
    path: "{{ home_dir }}/.kube"
    state: directory
    mode: '0700'

- name: Copy kubeconfig to .kube Directory
  template:
    src: kubeconfig.j2
    dest: "{{ home_dir }}/.kube/config"
    mode: '0600'

- name: Test Cluster Connection
  kubernetes.core.k8s_cluster_info:
    api_key: "{{ K8S_AUTH_API_KEY }}"
    host: "{{ K8S_AUTH_HOST }}"
  register: api_status
  retries: 10
  delay: 60
  until: api_status.connection is defined and api_status.connection.host == K8S_AUTH_HOST