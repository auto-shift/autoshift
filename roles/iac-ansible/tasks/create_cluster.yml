---
- name: "Gathering VPC facts from {{ vpc_name }}"
  ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ vpc_name }}"
  register: vpc_facts
  
- name: Gathering private subnet facts
  ec2_vpc_subnet_info:
    filters:
      vpc-id: "{{ vpc_facts.vpcs[0].id }}"
      "tag:use": private
  register: subnet_facts

- name: Gather Hosted Zones
  route53_info:
    query: hosted_zone
  register: hz_facts

- name: Define hosted_zone_id
  set_fact:
    hosted_zone_id: "{{ item.Id.split('/')[2] }}"
  when: item.Name == cluster_name+'.'+base_domain+'.'
  loop: "{{ hz_facts.HostedZones }}"
  
- name: Check if {{ home_dir }}/.ssh Directory Exists
  stat:
    path: "{{ home_dir }}/.ssh"
  register: ssh_dir

- name: Create {{ home_dir }}/.ssh Directory
  file:
    path: "{{ home_dir }}/.ssh"
    state: directory
    mode: '0700'
  when: ssh_dir.stat.exists == False

- name: Generate Deployment Keys
  openssh_keypair:
    path: "{{ home_dir }}/.ssh/id_rsa_{{ cluster_name }}"
    comment: "core@ocp.kubeadmin"
  register: ssh_facts

- set_fact:
    ssh_key: "{{ lookup('file', '{{ ssh_facts.filename }}.pub') }}"

- name: Creating installation directory
  file:
    path: "{{ install_dir }}"
    state: directory
  
- name: Creating install-config.yaml
  template:
    src: install-config.yaml.j2
    dest: "{{ install_dir }}/install-config.yaml"

- name: Create Manifests
  shell: openshift-install create manifests --dir {{ install_dir }}

- name: Copy IngressController
  copy:
    src: cluster-ingress-default-ingresscontroller.yaml
    dest: "{{ install_dir }}/manifests/cluster-ingress-default-ingresscontroller.yaml"

- name: Create OCP Cluster
  script: openshift-install.sh {{ install_dir }} create

- name: Copy SSH key to install dir
  copy:
    src: "{{ home_dir }}/.ssh/id_rsa_{{ cluster_name }}"
    dest: "{{ install_dir }}/auth/id_rsa_{{ cluster_name }}"

- name: Create S3 bucket
  aws_s3:
    bucket: "{{ cluster_name }}-openshift-install"
    mode: create
    permission: bucket-owner-read
    encrypt: yes

- name: Compress install directory
  archive:
    path: "{{ install_dir }}"
    dest: "{{ install_dir }}.tgz"

- name: Push install directory to S3 bucket
  aws_s3:
    bucket: "{{ cluster_name }}-openshift-install"
    object: openshift_install.tgz
    src: "{{ install_dir }}.tgz"
    mode: put
    encrypt: yes

- name: "Remove {{ install_dir }}.tgz"
  file:
    path: "{{ install_dir }}.tgz"
    state: absent

- name: Create .kube Directory
  file:
    path: "{{ home_dir }}/.kube"
    state: directory
    mode: '0700'

- name: Copy kubeconfig to .kube Directory
  copy:
    src: "{{ install_dir }}/auth/kubeconfig"
    dest: "{{ home_dir }}/.kube/config"
    mode: '0600'

- name: Store Kubeadmin
  set_fact:
    kubeadmin_password: "{{ lookup('file', vars['install_dir']+'/auth/kubeadmin-password') }}"
  no_log: true

- name: Set Host for k8
  set_fact:
    K8S_AUTH_HOST: "https://api.{{ cluster_name }}.{{ base_domain }}:6443"

- name: Get token
  shell: |
    oc login {{ K8S_AUTH_HOST }} --insecure-skip-tls-verify=true -u kubeadmin -p {{ kubeadmin_password }}
    oc whoami --show-token
  register: kube_token
  no_log: true

- name: Set Key for k8
  set_fact: 
    K8S_AUTH_API_KEY: "{{ kube_token.stdout_lines[kube_token.stdout_lines|length-1] }}"
  no_log: true