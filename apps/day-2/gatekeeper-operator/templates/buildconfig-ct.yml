{{{ if .Values.gatekeeper.enabled }}
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sbuilds
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "3"
    description: ""
spec:
  crd:
    spec:
      names:
        kind: K8sBuilds
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            sources:
              type: array
              items:
                type: object
                properties:
                  source:
                    type: string
            repos:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sbuilds

        violation[{"msg": msg}] {
          provided := {label | input.review.object.spec.source[label]}
          required := {label | label := input.parameters.sources[_].source}
          missing := required - provided
          count(missing) == 0
          msg := sprintf("Source has has invalid value <%v>", [input.parameters.sources[_].source])
        }

        violation[{"msg": msg}] {
          uri := input.review.object.spec.source.git.uri
          satisfied := [good | repo = input.parameters.repos[_] ; good = startswith(uri, repo)]
          not any(satisfied)
          msg := sprintf("uri has an invalid repo <%v>, allowed repos must begin with <%v>", [uri, input.parameters.repos])
        }        
{{ end }}